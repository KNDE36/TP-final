x[1,1:2]
x[3,]
x[3,]
x[3]
ncol(x); nrow(x)
t(x)
cbind(1,x)
cbind(1:3,1:6)
max(x); min(x)
apply(x,1,sum)
max(x); min(x)
dim(x)
length(x)
max(dim(x))
#############################
a=diag(3)
A
a
b=rnorm(9)
b
dim(b)=c(3,3)
B
b
require(abind)
install.packages("abind")
library(abind)
require(abind)
abind(a,b,along=3)->c
c
abind(a,b,along=1)->d
d
abind(a,b,along=2)->e
e
c<-matrix(c(2,1,5,6,3,8,4,9,2,7,3,5),nrow=3,ncol=4)
rm(c)
c<-matrix(c(2,1,5,6,3,8,4,9,2,7,3,5),nrow=3,ncol=4)
c
c[order(c[,1]),]
c[order(c[,3]),]
c[order(c[,2],decreasing=TRUE),]
diag(x)
l<-diag(5)
l
s=diag(10,3,4)
s
x=c(2,3,4,5)
x
y=diag(x,4,4)
y
#Ejercicio 9  CONSULTAR!!
a<-as.numeric(readline("ingrese un numero:"))
n<-0
repeat {
(Xn-((Xn^2)-a)/2*(Xn))
n<-n+1
if(n==1000) {
break
}
}
X<-0
F<-(X**2)
f<-(X)
repeat {
(f-(F-a)/2*f)
X<-X+1
if(X==1000) {
break
}
}
repeat {
(f-(F-a)/2*f)
X<-X+1
if(X==1000) {
break
}
}
F<-(X**2)
f<-(X)
repeat {
Y<-(f-(F-a)/2*f)
X<-X+1
if(X==1000) {
break
}
}
## PRACTICA iNTEGRADORA ##
#Ejercicio 1
C<-readline("ingrese su contraseña:")
c<-readline("¿Cual es su contraseña?")
length(C)
nchar(C)
if (nchar(C)==8) {
print("Contraseña_Correcta")
}
c<-readline("¿Cual es su contraseña?:")
print("Contraseña_Inorrecta")
c<-readline("ingrese nuevamente su contraseña:")
print("Contraseña_Correcta")
}
c<-readline("¿Cual es su contraseña?:")
if (c=!C) {
if (c!=C) {
print("Contraseña_Inorrecta")
c<-readline("ingrese nuevamente su contraseña:")
} else if (c==C) {
print("Contraseña_Correcta")
}
repeat {
c<-readline("¿Cual es su contraseña?:")
if (c==C) {
print("Contraseña_correcta")
break
}
if (c!=C) {
print("contraseña_incorrecta")
}
}
## PRACTICA iNTEGRADORA ##
#Ejercicio 1
C<-readline("ingrese su contraseña:")
repeat {
c<-readline("¿Cual es su contraseña?:")
if (c==C) {
print("Contraseña_correcta")
break
}
if (c!=C) {
print("contraseña_incorrecta")
}
}
#Ejercicio 2
x<-readline("ingrese un valor:")
x<-readline("ingrese un valor:")
x
if (x=="salir") {
break
}
}
repeat {
x
if (x=="salir") {
break
}
}
x<-readline("ingrese un valor:")
x
if (x=="salir") {
break
}
}
#Ejercicio 2
x<-readline("ingrese un valor:")
repeat {
x
if (x=="salir") {
break
}
}
source("~/.active-rstudio-document", echo=TRUE)
#Ejercicio 2
x<-as.character(readline("ingrese un valor:"))
repeat {
x
if (x=="salir") {
break
}
}
#Ejercicio 2
x<-readline("ingrese un valor:")
repeat {
print(x)
y<-readline("ingrese otro valor:")
if (x=="salir") {
break
}
}
n
#Ejercicio 2
x<-readline("ingrese un valor:")
repeat {
print(x)
x<-readline("ingrese otro valor:")
if (x=="salir") {
break
}
}
toupper(x)
#Ejercicio 4
x<-as.character(readline("ingrese una frase:"))
y<-readline("ingrese una letra:")
#Ejercicio 5
x<-as.integer(readline("ingrese un numero:"))
x<-as.integer(readline("ingrese un numero:"))
print("x es un numero primo")
} else if {
if (x/1==integer & x/x==integer) {
print("x es un numero primo")
} else {
print("X no es un numero primo")
}
x<-as.integer(readline("ingrese un numero:"))
print("x es un numero primo")
} else {
#Ejercicio 5
x<-as.integer(readline("ingrese un numero:"))
if (is.integer(x/1)==T & is.integer(x/x)==T) {
print("x es un numero primo")
} else {
print("X no es un numero primo")
}
#Ejercicio 5
x<-as.integer(readline("ingrese un numero:"))
#Ejercicio 5
x<-as.integer(readline("ingrese un numero:"))
if (is.integer(x/1)==T & is.integer(x/x)==T) {
print("x es un numero primo")
} else {
print("X no es un numero primo")
}
#Ejercicio 5
x<-as.integer(readline("ingrese un numero:"))
if (is.integer(x/1)==T & is.integer(x/x)==T) {
print("x es un numero primo")
} else {
print("X no es un numero primo")
}
#Ejercicio 5
x<-as.integer(readline("ingrese un numero:"))
if (is.integer(x/1)==T & is.integer(x/x)==T) {
print("x es un numero primo")
} else {
print("X no es un numero primo")
}
2%%4
2%%2
scan(file = "Hola", what = double())
scan(file = "Hola", what = "")
#Ejercicio 4
x<-readline("ingrese una frase:")
y<-readline("ingrese una letra:")
strsplit(x,"")
for (i in x) {
if(x[i]==y) {
reps<-reps+1
} else {
next
}
}
w<-strsplit(x,"")[[1]]
for (i in w) {
if(w[i]==y) {
reps<-reps+1
} else {
next
}
}
reps<-0
for (i in w) {
if(w[i]==y) {
reps<-reps+1
} else {
next
}
}
for (i in w) {
if([i]==y) {
for (i in w) {
if(i==y) {
reps<-reps+1
} else {
next
}
}
reps<-0
for (i in w) {
if(i==y) {
reps<-reps+1
print(reps)
} else {
next
}
}
reps<-0
for (i in w) {
if(i==y) {
reps<-reps+1
} else {
next
}
}
print (reps)
pnorm(0.95, 1, 0.04, lower.tail = F)
#2.2
qnorm(0.85, 0, 1)
(0.4/(0.05/qnorm(0.85, 0, 1)))^2
pnorm(0.95, 1, 0.4/sqrt(68.74843), lower.tail = F)
1.31/4
eje_x=seq(0, 7, 0.01)
eje_y=dnorm(eje_x, 4.4, 0.3275)
names(eje_y)=eje_x
plot(eje_x, eje_y, main="Probabilidades de promedios de altura de muestras de 100 arboles")
eje_x=seq(3, 7, 0.01)
eje_y=dnorm(eje_x, 4.4, 0.3275)
names(eje_y)=eje_x
plot(eje_x, eje_y, main="Probabilidades de promedios de altura de muestras de 100 arboles")
eje_x=seq(3, 6, 0.01)
eje_y=dnorm(eje_x, 4.4, 0.3275)
names(eje_y)=eje_x
plot(eje_x, eje_y, main="Probabilidades de promedios de altura de muestras de 100 arboles")
pnorm(4.2, 4.4, 0.3275)-pnorm(3.8, 4.4, 0.3275)
#4.2
s=1.31/sqrt(20)
pnorm(4.7, 4.4, s, lower.tail = F)
#4.3
qnorm(0.9, 4.4, s)
s=0.21/sqrt(30)
pnorm(0.5, 0.41, s, lower.tail = F)
(40/(10/qnorm(0.95, 0, 1)))^2
pnorm(170, 180, 40/sqrt(43,2887), lower.tail = F)
pnorm(170, 180, 40/sqrt(43.2887), lower.tail = F)
#4.1
pnorm(4.2, 4.4, 0.3275)-pnorm(3.8, 4.4, 0.3275)
?wich
?which
require(plot3D)
X=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33)
Y=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33,byrow=T)
#???tra forma de generar los dos renglones anteriores es usando la funcion mesh
MM<-mesh(seq(-8,8,by=0.5),seq(-8,8,by=0.5))
class(MM)
X<-MM$x ; Y<-MM$y
R = sqrt(X^2 + Y^2) + .Machine$double.eps
Z = sin(R)/R
surf3D(X,Y,Z,facets=F)
surf3D(X,Y,Z,facets=NA)
surf3D(X,Y,Z,facets=F,border = "black",colkey=F)
surf3D(X,Y,Z)
surf3D(X,Y,Z,phi=40,theta = 20)
surf3D(X,Y,Z,phi=40,theta = 60)
surf3D(X,Y,Z,colkey=F)
surf3D(X,Y,Z,colvar=Y,colkey=F,ltheta=20,bty="b2",phi=0)
surf3D(X,Y,Z,colvar=X,colkey=F,bty="b")
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,shade=0.5)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*0.8)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*1.2)
surf3D(X,Y,Z,box=FALSE,theta=60,col = "lightblue", shade = 0.9)
for (angle in seq(0, 360, by = 10)) plotdev(theta = angle)
View(Y)
y<-runif(30)
x<-runif(30)
plot(x,y,type="l",xlab=“x",ylab=“y", main="Parabola y=x^2“, col=“red”)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
jpeg(“Grafico.jpg”)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
jpeg("Grafico.jpg")
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
dev.off()
source("~/.active-rstudio-document", echo=TRUE)
function(extras = c("*",".", "o","O","0","+","-","|","%","#"),
cex = 3, ## good for both .Device=="postscript" and "x11"
col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,
main = paste("plot symbols :  points (...  pch = *, cex =",
cex,")"))
{
nex <- length(extras)
np  <- 26 + nex
ipch <- 0:(np-1)
k <- floor(sqrt(np))
dd <- c(-1,1)/2
rx <- dd + range(ix <- ipch %/% k)
ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)
pch <- as.list(ipch) # list with integers & strings
if(nex > 0) pch[26+ 1:nex] <- as.list(extras)
plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)
abline(v = ix, h = iy, col = "lightgray", lty = "dotted")
for(i in 1:np) {
pc <- pch[[i]]
## 'col' symbols with a 'bg'-colored interior (where available) :
points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)
if(cextext > 0)
text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)
}
}
pchShow()
source("~/.active-rstudio-document", echo=TRUE)
pchShow()
pchShow(c("o","O","0"), cex = 2.5)
pchShow(NULL, cex = 4, cextext = 0, main = NULL)
require(fields)
require(ncdf4)
require(mapdata)
######## EJERCICIO SERIE TEMPORAL CON DATOS DE TEMP ######
require(ncdf4)
######## EJERCICIO SERIE TEMPORAL CON DATOS DE TEMP ######
require(ncdf4)
require(ncdf4)
setwd("~/Escritorio/Labo_Cande/TP_final")
archivo<-"~/Escritorio/Labo_Cande/TP_final/sst.mnmean_ERSST.nc-20231109T122820Z-001.zip"
GlanceNetCDF(archivo)
library(udunits2)
library(metR)
GlanceNetCDF(archivo)
archivo<-"~/Escritorio/Labo_Cande/TP_final/sst.mnmean_ERSST.nc-20231109T122820Z-001.zip"
GlanceNetCDF(archivo)
nc<-nc_open(archivo)
archivo<-"~/Escritorio/Labo_Cande/TP_final/sst.mnmean_ERSST.nc"
GlanceNetCDF(archivo)
nc<-nc_open(archivo)
require(udunits2)
require(metR)
archivo<-"~/Escritorio/Labo_Cande/TP_final/sst.mnmean_ERSST.nc-20231109T122820Z-001.zip"
GlanceNetCDF(archivo)
archivo<-"/home/clinux01/Escritorio/Labo_Cande/TP_final/sst.mnmean_ERSST.nc-20231109T122820Z-001/sst.mnmean_ERSST.nc"
GlanceNetCDF(archivo)
nc<-nc_open(archivo)
nc
datos_sst<-ReadNetCDF(archivo,vars = "sst")
source("~/.active-rstudio-document", echo=TRUE)
View(datos_sst)
360-40
360-70
#abro para quedarme solo con la region mar argentino y cercanias
sst_mar_argentino<-ReadNetCDF(archivo,vars = "sst",subset = list(lat=c(-60,-20),lon=c(290,320)))
setwd("~/Escritorio/Labo_Cande/TP_final")
archivo<-"~/Escritorio/Labo_Cande/TP_final/sst.mnmean_ERSST.nc"
GlanceNetCDF(archivo)
sst_mar_argentino<-ReadNetCDF(archivo,vars = "sst",subset = list(lat=c(-60,-20),lon=c(290,320)))
View(sst_mar_argentino)
View(sst_mar_argentino)
require(ggplot2)
ggplot(sst_mar_argentino,aes(x=lon, y=lat))
ggplot(sst_mar_argentino,aes(x=lon, y=lat)) +
labs(title = "Region Mar Argentino y cercanias", x="Longitud",y="Latitud")
ggplot(sst_mar_argentino,aes(x=lon, y=lat)) +
geom_path(wmap_df,aes(group=group,fill=NULL),colour ="black")+ coord_quickmap()+
labs(title = "Region Mar Argentino y cercanias", x="Longitud",y="Latitud")
world<-map_data("argentina")
world<-map_data(maps::argentina)
world<-map_data(maps::argentina())
world<-map_data(maps::france)
world<-map_data("world2")
View(world)
mapa<-map_data("world2")
head(mapa)
which(mapa$region=="Argentina")
mapa[[2120]]
mapa[2120]
mapa["989"]
mapa[989]
mapa[989,]
require("rnaturalearth")
install.packages("rnaturalearth")
mapa1<-fortify(rnaturalearth::ne_states("Argentina"))
install.packages("rnaturalearth")
mapa<-map_data("world2")
mapa1<-fortify(rnaturalearth::ne_states("Argentina"))
mapa<-map_data("world2")
ggplot(sst_mar_argentino,aes(x=lon, y=lat)) +
geom_path(mapa,aes(group=group,fill=NULL),colour ="black")+ coord_quickmap("orthographic",orientation=list(c(-60,-20),c(290,320)))+
labs(title = "Region Mar Argentino y cercanias", x="Longitud",y="Latitud")
mapa<-map_data("world2")
ggplot(sst_mar_argentino,aes(x=lon, y=lat)) +
geom_path(mapa,mapping=aes(group=group,fill=NULL),colour ="black")+ coord_quickmap("orthographic",orientation=list(c(-60,-20),c(290,320)))+
labs(title = "Region Mar Argentino y cercanias", x="Longitud",y="Latitud")
mapa<-map_data("world2")
ggplot(sst_mar_argentino,aes(x=lon, y=lat)) +
geom_path(mapa,mapping=aes(group=group,fill=NULL),colour ="black")+ coord_quickmap("orthographic",orientation=c(-60,320))+
labs(title = "Region Mar Argentino y cercanias", x="Longitud",y="Latitud")
ggplot(sst_mar_argentino,aes(x=lon, y=lat)) +
geom_path(mapa,mapping=aes(group=group,fill=NULL),colour ="black")+ coord_quickmap("orthographic",orientation= c(-60,320,0))+
labs(title = "Region Mar Argentino y cercanias", x="Longitud",y="Latitud")
aggregate(sst_mar_argentino~months(sst_mar_argentino$time))
View(sst_mar_argentino)
############### ITEM B ##############
require(lubridate)
month(sst_mar_argentino$time)
sst_mar_argentino$month=month(sst_mar_argentino$time)
sst_mar_argentino$mes<-month(sst_mar_argentino$time)
aggregate(sst_mar_argentino$sst,by=list("mes","lat","lon"),FUN="mean")
source("~/.active-rstudio-document", echo=TRUE)
require(lubridate)
sst_mar_argentino$mes<-month(sst_mar_argentino$time)
aggregate(sst_mar_argentino$sst,by=list("mes","lat","lon"),FUN="mean")
source("~/.active-rstudio-document", echo=TRUE)
require(lubridate)
sst_mar_argentino$month<-month(sst_mar_argentino$time)
aggregate(sst_mar_argentino$sst,by=list("month","lat","lon"),FUN="mean")
source("~/.active-rstudio-document", echo=TRUE)
require(lubridate)
sst_mar_argentino$mes<-month(sst_mar_argentino$time)
aggregate(sst_mar_argentino$sst,by=list("mes","lat","lon"),FUN="mean")
climatologia<-aggregate(sst_mar_argentino$sst,by=list("mes","lat","lon"),FUN="mean")
climatologia
sst_mar_argentino$mes<-month(sst_mar_argentino$time)
climatologia<-aggregate(sst_mar_argentino$sst,by=list("mes","lat","lon"),FUN="mean")
length(sst_mar_argentino$time)
length(sst_mar_argentino$mes)
climatologia<-aggregate(sst_mar_argentino$sst,by=list("mes","lat","lon"),FUN="mean")
climatologia<-aggregate(sst_mar_argentino$sst,list("mes","lat","lon"),mean)
climatologia<-aggregate(sst_mar_argentino$sst,list(sst_mar_argentino$mes,sst_mar_argentino$lat,sst_mar_argentino$lon),mean)
View(climatologia)
sst_mar_argentino
length(sst_mar_argentino$lat)
sst_mar_argentino$año<-year(sst_mar_argentino$time)
climatologia<-aggregate(sst_mar_argentino$sst,list(sst_mar_argentino$mes,sst_mar_argentino$lat,sst_mar_argentino$lon,sst_mar_argentino$año),mean)
colnames(climatologia)<-c("Mes","Latitud","Longitud","Climatologia Mensual")
colnames(climatologia)<-c("Mes","Latitud","Longitud","Año","Climatologia Mensual")
climatologia<-aggregate(sst_mar_argentino$sst,list(sst_mar_argentino$mes,sst_mar_argentino$lat,sst_mar_argentino$lon),mean)
colnames(climatologia)<-c("Mes","Latitud","Longitud","Año","Climatologia Mensual")
colnames(climatologia)<-c("Mes","Latitud","Longitud","Climatologia Mensual")
